责任链：定义一个接口，许多个类实现接口，然后在一个类中定义这许多个类的数组，用for遍历依次实现接口方法的不同实现。每次想要增加一个实现方式时，多写一个继承接口的类，再把该类放入实用类数组中即可。
将一个责任链插入另一个责任链：定义一个链，里面包含一个容器（可以用add方法加入接口类型），而这个链实现接口，则可以在一个链调用add加入另一个链。
过滤器栈：利用递归和函数栈。

将函数中传入object，再强转为某接口类并比较大小，适用于不确定对比对象的类型。
写实现comparator的类，适用于一个类，不确定比较的方式。
以此，策略模式将二者连用，comparable被类实现，而comparator的实现类作为类的成员被类使用。
https://blog.csdn.net/u013741073/article/details/50743081

动态代理：代理实现接口，并有一个接口成员，如此一来代理可以聚合代理。
